{
	"Router create": {
		"scope": "javascript",
		"prefix": "router create",
		"body": [
			"Router.post('/$1s', Middlewares.auth, Hub.create$2)",
		]
	},
	
	"Router gets": {
		"scope": "javascript",
		"prefix": "router gets",
		"body": [
			"Router.get('/$1s', Middlewares.auth, Hub.get$2s)",
		]
	},

	"Router get": {
		"scope": "javascript",
		"prefix": "router get",
		"body": [
			"Router.get('/$1s/:$1Id', Middlewares.auth, Hub.get$2)",
		]
	},

	"Router update": {
		"scope": "javascript",
		"prefix": "router update",
		"body": [
			"Router.put('/$1s/:$1Id', Middlewares.auth, Hub.update$2)",
		]
	},

	"Router delete": {
		"scope": "javascript",
		"prefix": "router delete",
		"body": [
			"Router.delete('/$1s/:$1Id', Middlewares.auth, Hub.delete$2)",
		]
	},

	"Router Master": {
		"scope": "javascript",
		"prefix": "router master",
		"body": [
			"const Router = require('express').Router()",
			"const Hub = require('./$1s.hub')",
			"const Middlewares = require('../middlewares')",
			"",
			"Router.post('/$1s', Middlewares.auth, Hub.create$2)",
			"",
			"Router.get('/$1s', Middlewares.auth, Hub.get$2s)",
			"",
			"Router.get('/$1s/:$1Id', Middlewares.auth, Hub.get$2)",
			"",
			"Router.put('/$1s/:$1Id', Middlewares.auth, Hub.update$2)",
			"",
			"Router.delete('/$1s/:$1Id', Middlewares.auth, Hub.delete$2)",
			"",
			"module.exports = Router",
		]
	},

	"Hub create": {
		"scope": "javascript",
		"prefix": "hub create",
		"body": [
			"async function create$2(req, res) {",
				"\ttry {",
				"",
				"\t\tconst $1s = new $2s(req)",
				"",
				"\t\tconst data = {",
				"",
				"\t\t}",
				"",
				"\t\tres.\\$data(await Service.create$2(data))",
				"",
				"\t} catch(error) {",
				"\t\tres.\\$error(error)",
				"\t}",
			"}",
		]
	},

	"Hub gets": {
		"scope": "javascript",
		"prefix": "hub gets",
		"body": [
			"async function get$2s(req, res) {",
				"\ttry {",
				"",
				"\t\tconst $1s = new $2s(req)",
				"",
				"\t\tconst data = {",
				"",
				"\t\t}",
				"",
				"\t\tconst query = {",
				"\t\t\tpage: parseInt(req.query.page || 0),",
				"\t\t\tfind: req.query.find",
				"\t\t}",
				"",
				"\t\tres.\\$data(await Service.get$2s(data, query))",
				"",
				"\t} catch(error) {",
				"\t\tres.\\$error(error)",
				"\t}",
			"}",
		]
	},

	"Hub get": {
		"scope": "javascript",
		"prefix": "hub get",
		"body": [
			"async function get$2(req, res) {",
				"\ttry {",
				"",
				"\t\tconst $1s = new $2s(req)",
				"",
				"\t\tconst data = {",
					"\t\t\t$1Id: $1s.$1Id.get()",
				"\t\t}",
				"",
				"\t\tres.\\$data(await Service.get$2(data.$1Id))",
				"",
				"\t} catch(error) {",
				"\t\tres.\\$error(error)",
				"\t}",
			"}",
		]
	},

	"Hub update": {
		"scope": "javascript",
		"prefix": "hub update",
		"body": [
			"async function update$2(req, res) {",
				"\ttry {",
				"",
				"\t\tconst $1s = new $2s(req)",
				"",
				"\t\tlet data = {",
					"\t\t\t$1Id: $1s.$1Id.get()",
				"\t\t}",
				"",
				"\t\tconst props = [",
				"\t\t]",
				"",
				"\t\tdata = Methods.updateValidation(data, props, req.body, $1s)",
				"",
				"\t\tres.\\$data(await Service.update$2(data.$1Id, data))",
				"",
				"\t} catch(error) {",
				"\t\tres.\\$error(error)",
				"\t}",
			"}",
		]
	},

	"Hub delete": {
		"scope": "javascript",
		"prefix": "hub delete",
		"body": [
			"async function delete$2(req, res) {",
				"\ttry {",
				"",
				"\t\tconst $1s = new $2s(req)",
				"",
				"\t\tconst data = {",
					"\t\t\t$1Id: $1s.$1Id.get()",
				"\t\t}",
				"",
				"\t\tres.\\$data(await Service.delete$2(data.$1Id))",
				"",
				"\t} catch(error) {",
				"\t\tres.\\$error(error)",
				"\t}",
			"}",
		]
	},

	"Hub Master": {
		"scope": "javascript",
		"prefix": "hub master",
		"body": [
			"const { $2s } = require('../fields')",
			"const Service = require('./$1s.service')",
			"const Methods = require('../methods')",
			"",
			"module.exports = {",
				"\tcreate$2,",
				"\tget$2s,",
				"\tget$2,",
				"\tupdate$2,",
				"\tdelete$2",
			"}",
			"",
			"async function create$2(req, res) {",
				"\ttry {",
				"",
				"\t\tconst $1s = new $2s(req)",
				"",
				"\t\tconst data = {",
				"",
				"\t\t}",
				"",
				"\t\tres.\\$data(await Service.create$2(data))",
				"",
				"\t} catch(error) {",
				"\t\tres.\\$error(error)",
				"\t}",
			"}",
			"",
			"async function get$2s(req, res) {",
				"\ttry {",
				"",
				"\t\tconst $1s = new $2s(req)",
				"",
				"\t\tconst data = {",
				"",
				"\t\t}",
				"",
				"\t\tconst query = {",
				"\t\t\tpage: parseInt(req.query.page || 0),",
				"\t\t\tfind: req.query.find",
				"\t\t}",
				"",
				"\t\tres.\\$data(await Service.get$2s(data, query))",
				"",
				"\t} catch(error) {",
				"\t\tres.\\$error(error)",
				"\t}",
			"}",
			"",
			"async function get$2(req, res) {",
				"\ttry {",
				"",
				"\t\tconst $1s = new $2s(req)",
				"",
				"\t\tconst data = {",
					"\t\t\t$1Id: $1s.$1Id.get()",
				"\t\t}",
				"",
				"\t\tres.\\$data(await Service.get$2(data.$1Id))",
				"",
				"\t} catch(error) {",
				"\t\tres.\\$error(error)",
				"\t}",
			"}",
			"",
			"async function update$2(req, res) {",
				"\ttry {",
				"",
				"\t\tconst $1s = new $2s(req)",
				"",
				"\t\tlet data = {",
					"\t\t\t$1Id: $1s.$1Id.get()",
				"\t\t}",
				"",
				"\t\tconst props = [",
				"\t\t]",
				"",
				"\t\tdata = Methods.updateValidation(data, props, req.body, $1s)",
				"",
				"\t\tres.\\$data(await Service.update$2(data.$1Id, data))",
				"",
				"\t} catch(error) {",
				"\t\tres.\\$error(error)",
				"\t}",
			"}",
			"",
			"async function delete$2(req, res) {",
				"\ttry {",
				"",
				"\t\tconst $1s = new $2s(req)",
				"",
				"\t\tconst data = {",
					"\t\t\t$1Id: $1s.$1Id.get()",
				"\t\t}",
				"",
				"\t\tres.\\$data(await Service.delete$2(data.$1Id))",
				"",
				"\t} catch(error) {",
				"\t\tres.\\$error(error)",
				"\t}",
			"}",
		]
	},

	"Service create": {
		"scope": "javascript",
		"prefix": "service create",
		"body": [
			"async function create$2(data) {",
				"\ttry {",
					"",
					"\t\tconst $1 = new Model(data)",
					"",
					"\t\treturn await $1.save()",
					"",
				"\t} catch(error) {",
					"\t\tthrow error",
				"\t}",
			"}",
		]
	},

	"Service gets": {
		"scope": "javascript",
		"prefix": "service gets",
		"body": [
			"async function get$2s(data, query) {",
				"\ttry {",
					"",
					"\t\tconst options = {}",
					"\t\tconst limit = 100",
					"\t\tconst page = query.page",
					"",
					"\t\tif(query.find) {",
					"\t\t\tconst regexp = new RegExp(query.find, 'i')",
					"\t\t\toptions.\\$or = []",
					"\t\t}",
					"",
					"\t\tconst $1s = await Model.find(options)",
					"\t\t\t.skip(page * limit)",
					"\t\t\t.limit(limit)",
					"\t\t\t.sort({created: -1})",
					"",
					"\t\tconst total = await Model.countDocuments(options)",
					"",
					"\t\treturn {",
					"\t\t\t$1s,",
					"\t\t\tmetadata: Methods.metadata(page, limit, total, $1s.length),",
					"\t\t\tquery",
					"\t\t}",
					"",
				"\t} catch(error) {",
					"\t\tthrow error",
				"\t}",
			"}",
		]
	},

	"Service get": {
		"scope": "javascript",
		"prefix": "service get",
		"body": [
			"async function get$2($1Id) {",
				"\ttry {",
					"",
					"\t\tconst $1 = await Model.findOne({_id: $1Id})",
					"",
					"\t\tif(!$1)",
					"\t\t\tthrow Messages($1Id).$1NotFound",
					"",
					"\t\treturn $1",
					"",
				"\t} catch(error) {",
					"\t\tthrow error",
				"\t}",
			"}",
		]
	},

	"Service update": {
		"scope": "javascript",
		"prefix": "service update",
		"body": [
			"async function update$2($1Id, data) {",
				"\ttry {",
					"",
					"\t\tconst $1 = await get$2($1Id)",
					"\t\tconst keys = Object.keys(data)",
					"",
					"\t\tkeys.forEach(key => {",
					"\t\t\t$1[key] = data[key]",
					"\t\t})",
					"",
					"\t\treturn await $1.save()",
					"",
				"\t} catch(error) {",
					"\t\tthrow error",
				"\t}",
			"}",
		]
	},

	"Service delete": {
		"scope": "javascript",
		"prefix": "service delete",
		"body": [
			"async function delete$2($1Id) {",
				"\ttry {",
					"",
					"\t\tawait Model.deleteOne({_id: $1Id})",
					"",
					"\t\treturn $1Id",
					"",
				"\t} catch(error) {",
					"\t\tthrow error",
				"\t}",
			"}",
		]
	},

	"Service Master": {
		"scope": "javascript",
		"prefix": "service master",
		"body": [
			"const Model = require('./$1s.model')",
			"const Messages = require('./$1s.messages')",
			"const Services = require('../services')",
			"const Methods = require('../methods')",
			"",
			"module.exports = {",
				"\tcreate$2,",
				"\tget$2s,",
				"\tget$2,",
				"\tupdate$2,",
				"\tdelete$2,",
				"\tModel,",
				"\tMessages",
			"}",
			"",
			"async function create$2(data) {",
				"\ttry {",
					"",
					"\t\tconst $1 = new Model(data)",
					"",
					"\t\treturn await $1.save()",
					"",
				"\t} catch(error) {",
					"\t\tthrow error",
				"\t}",
			"}",
			"",
			"async function get$2s(data, query) {",
				"\ttry {",
					"",
					"\t\tconst options = {}",
					"\t\tconst limit = 100",
					"\t\tconst page = query.page",
					"",
					"\t\tif(query.find) {",
					"\t\t\tconst regexp = new RegExp(query.find, 'i')",
					"\t\t\toptions.\\$or = []",
					"\t\t}",
					"",
					"\t\tconst $1s = await Model.find(options)",
					"\t\t\t.skip(page * limit)",
					"\t\t\t.limit(limit)",
					"\t\t\t.sort({created: -1})",
					"",
					"\t\tconst total = await Model.countDocuments(options)",
					"",
					"\t\treturn {",
					"\t\t\t$1s,",
					"\t\t\tmetadata: Methods.metadata(page, limit, total, $1s.length),",
					"\t\t\tquery",
					"\t\t}",
					"",
				"\t} catch(error) {",
					"\t\tthrow error",
				"\t}",
			"}",
			"",
			"async function get$2($1Id) {",
				"\ttry {",
					"",
					"\t\tconst $1 = await Model.findOne({_id: $1Id})",
					"",
					"\t\tif(!$1)",
					"\t\t\tthrow Messages($1Id).$1NotFound",
					"",
					"\t\treturn $1",
					"",
				"\t} catch(error) {",
					"\t\tthrow error",
				"\t}",
			"}",
			"",
			"async function update$2($1Id, data) {",
				"\ttry {",
					"",
					"\t\tconst $1 = await get$2($1Id)",
					"\t\tconst keys = Object.keys(data)",
					"",
					"\t\tkeys.forEach(key => {",
					"\t\t\t$1[key] = data[key]",
					"\t\t})",
					"",
					"\t\treturn await $1.save()",
					"",
				"\t} catch(error) {",
					"\t\tthrow error",
				"\t}",
			"}",
			"",
			"async function delete$2($1Id) {",
				"\ttry {",
					"",
					"\t\tawait Model.deleteOne({_id: $1Id})",
					"",
					"\t\treturn $1Id",
					"",
				"\t} catch(error) {",
					"\t\tthrow error",
				"\t}",
			"}",
		]
	},

	"Message": {
		"scope": "javascript",
		"prefix": "message",
		"body": [
			"${1:errorName}: {",
				"\tcode: ${3:503},",
				"\tkey: '${1:errorName}',",
				"\tmessage: \\$message || '$2',",
				"\t\\$details",
			"},",
		]
	},

	"Messages Master": {
		"scope": "javascript",
		"prefix": "messages master",
		"body": [
			"module.exports = function(\\$details, \\$message) {",
				"\treturn {",
					"",
					"\t\t$1SaveError: {",
						"\t\t\tcode: 503,",
						"\t\t\tkey: '$1SaveError',",
						"\t\t\tmessage: \\$message || 'Error al guardar la información de la $2',",
						"\t\t\t\\$details",
					"\t\t},",
					"",
					"\t\t$1GetError: {",
						"\t\t\tcode: 503,",
						"\t\t\tkey: '$1GetError',",
						"\t\t\tmessage: \\$message || 'Error al obtener la $2',",
						"\t\t\t\\$details",
					"\t\t},",
					"",
					"\t\t$1NotFound: {",
						"\t\t\tcode: 503,",
						"\t\t\tkey: '$1NotFound',",
						"\t\t\tmessage: \\$message || 'El registro de la $2 no fue encontrado',",
						"\t\t\t\\$details",
					"\t\t},",
					"",
					"\t\t$1DeleteError: {",
						"\t\t\tcode: 503,",
						"\t\t\tkey: '$1DeleteError',",
						"\t\t\tmessage: \\$message || 'Error al borrar la información de la $2',",
						"\t\t\t\\$details",
					"\t\t},",
				"\t}",
			"}",
		]
	},

	"Field": {
		"scope": "javascript",
		"prefix": "field",
		"body": [
			"this.${1:fieldName} = validator({",
				"\ttype: '${3:fieldType}',",
				"\tvalue: props.${1:fieldName},",
				"\tname: '${2:fieldText}'",
			"})",
		]
	},

	"Fields Master": {
		"scope": "javascript",
		"prefix": "fields master",
		"body": [
			"const validator = require('../validator')",
			"",
			"const Fields = function(req) {",
			"",
				"\tconst props = {...req.headers, ...req.params, ...req.query, ...req.body}",
			"",
				"\tthis.$1Id = validator({",
					"\t\ttype: 'objectId',",
					"\t\tvalue: props.$1Id,",
					"\t\tname: 'identificador'",
				"\t})",
			"",
				"\treturn this",
			"}",
			"",
			"module.exports = Fields"
		]
	},

	"Model Master": {
		"scope": "javascript",
		"prefix": "model master",
		"body": [
			"const Schema = require('mongoose').Schema",
			"const ObjectId = require('mongoose').Types.ObjectId",
			"const Model = require('mongoose').model",
			"const Messages = require('./$2s.messages')",
			"",
			"const schema = new Schema({",
				"",
				"\tcreated: {",
					"\t\ttype: Date,",
					"\t\tdefault: Date.now",
				"\t}",
			"})",
			"",
			"schema.pre('save', function(next) {",
				"\tnext()",
			"})",
			"",
			"schema.post('save', function(err, doc, next) {",
				"\tif(err) return next(Messages(err).$2SaveError)",
				"\tnext()",
			"})",
			"",
			"schema.post('remove', function(err, doc, next) {",
				"\tif(err) return next(Messages(err).$2DeleteError)",
				"\tnext()",
			"})",
			"",
			"schema.post('findOne', function(err, doc, next) {",
				"\tif(err) return next(Messages(err).$2GetError)",
				"\tnext()",
			"})",
			"",
			"schema.post('find', function(err, doc, next) {",
				"\tif(err) return next(Messages(err).$2GetError)",
				"\tnext()",
			"})",
			"",
			"module.exports = Model('$1', schema)"
		]
	},

	"log json": {
		"scope": "javascript, typescript",
		"prefix": "log json",
		"body": [
			"console.log(JSON.stringify($1, null, 4))$0"
		],
		"description": "Log output to console"

	}
}